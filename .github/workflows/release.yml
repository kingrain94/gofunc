name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22.x

    - name: Run tests
      run: go test -v -race ./...

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        
        # Save changelog to file
        echo "## Changes in $VERSION" > changelog.md
        echo "" >> changelog.md
        echo "$CHANGELOG" >> changelog.md
        
        # Set output for GitHub release
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22.x

    - name: Generate documentation
      run: |
        go doc -all . > docs.txt
        echo "Documentation generated successfully"

    - name: Update pkg.go.dev
      run: |
        # Trigger pkg.go.dev update
        curl -X POST "https://proxy.golang.org/github.com/kingrain94/gofunc/@v/${{ steps.changelog.outputs.VERSION }}.info" || true
        echo "pkg.go.dev update triggered"
